set	pgp_create_traditional=no
unset	pgp_replyencrypt
unset	pgp_replysign
unset	pgp_replysignencrypted
set	pgp_show_unusable
set	pgp_sign_as = "0x2C78B9A6"
#set	pgp_sign_micalg=pgp-md5
set	pgp_sort_keys=trust
set	pgp_strict_enc
set	pgp_timeout=7200
set	pgp_verify_sig=yes
unset	pgp_autoencrypt
unset	pgp_autosign
unset	pgp_long_ids
unset	pgp_retainable_sigs

# This version uses gpg-2comp from 
#   http://muppet.faveve.uni-stuttgart.de/~gero/gpg-2comp/
#
# $ Id: gpg.rc,v 1.7 2000/02/02 10:40:59 roland Exp roland $
#
# %p    The empty string when no passphrase is needed,
#       the string "PGPPASSFD=0" if one is needed.
#
#       This is mostly used in conditional % sequences.
#
# %f    Most PGP commands operate on a single file or a file
#       containing a message.  %f expands to this file's name.
#
# %s    When verifying signatures, there is another temporary file
#       containing the detached signature.  %s expands to this
#       file's name.
#
# %a    In "signing" contexts, this expands to the value of the
#       configuration variable $pgp_sign_as.  You probably need to
#       use this within a conditional % sequence.
#
# %r    In many contexts, mutt passes key IDs to pgp.  %r expands to
#       a list of key IDs.

# decode application/pgp
#set pgp_decode_command="gpg %?p?--passphrase-fd 0? --no-verbose --batch -o - %f"
set pgp_decode_command="gpg %?p?--passphrase-fd 0? --batch --output - %f"

# verify a pgp/mime signature
#set pgp_verify_command="gpg --no-verbose --batch -o - --verify %s %f"
set pgp_verify_command="gpg --batch --output - --verify %s %f"

# decrypt a pgp/mime attachment
set pgp_decrypt_command="gpg --passphrase-fd 0 --no-verbose --batch --output - %f"

# create a pgp/mime signed attachment
set pgp_sign_command="gpg-2comp --no-verbose --batch --output - --passphrase-fd 0 --armor --detach-sign --textmode %?a?-u %a? %f"

# create a application/pgp signed (old-style) message
set pgp_clearsign_command="gpg-2comp --no-verbose --batch --output - --passphrase-fd 0 --armor --textmode --clearsign %?a?-u %a? %f"

# create a pgp/mime encrypted attachment
set pgp_encrypt_only_command="pgpewrap gpg-2comp -v --batch --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
set pgp_encrypt_sign_command="pgpewrap gpg-2comp --passphrase-fd 0 -v --batch -o - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"

# import a key into the public key ring
set pgp_import_command="gpg --no-verbose --import -v %f"

# export a key from the public key ring
set pgp_export_command="gpg --no-verbose --export --armor %r"

# verify a key
set pgp_verify_key_command="gpg --no-verbose --batch --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command="gpg --no-verbose --batch --with-colons --list-keys %r" 

# read in the secret key ring
set pgp_list_secring_command="gpg --no-verbose --batch --with-colons --list-secret-keys %r" 

# receive key from keyserver:
#set pgp_getkeys_command="wrap.sh -g %r"
set pgp_getkeys_command=""
# Note: not needed anymore, let gpg do it. Put this in ~/.gnupg/gpg.conf :
# keyserver x-hkp://subkeys.pgp.net
# keyserver x-hkp://pgp.mit.edu
# keyserver ldap://keyserver.pgp.com
# keyserver-options auto-key-retrieve


# string that the verify command outputs if the signature is good
#set pgp_good_sign="Good signature"             # English version
#set pgp_good_sign="Korrekte Unterschrift"      # German version (LANG=de)
set pgp_good_sign="" # not needed, if exit code ok.

# vim:ts=8 sw=4 ft=muttrc
