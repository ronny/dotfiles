set autoindent

" auto save modifications to files when using critical commands?
set autowrite

" only do backups if we're in unix
if has("unix")
    set backup
    " tip: use cron to flush stale backups weekly
    set backupdir=~/.vim_bak
else
    set nobackup
endif

" backspacing over indent, EOL, SOL?
set backspace=2

" either "dark" or "light"?
set background=dark

" window size
"if has("gui_win32") || has("win32")
if has("gui_running")
    set columns=100 lines=50
endif

" characters and rules for comment auto formatting
set comments=b:#,:%,n:>,fb:-,fb:*

" compatible with vi?
set nocompatible

" where to look for word-completion
if has("unix")
    set complete=.,w,b,u,t,i,k
    set dictionary=/usr/share/dict/words
else
    set complete=.,w,b,u,t,i
endif

set diffopt=filler,iwhite

" where to put swapfiles?
if has("gui_win32") || has("win32")
    set directory=$VIM
endif

" encoding; default=latin1
set encoding=utf8

" bells/beeps?
set noerrorbells

" allows cursor keys within insert mode only on SunOS
"if has("unix") && system('uname')=='SunOS'
"    set esckeys
"endif

" expand tabs? see also: 'list' and 'listchars'
set expandtab

" file encoding
set fileencoding=utf8

" options for text format command
set formatoptions=cqrtn

" what font to use
if has("win32") || has("gui_win32")
    "set guifont=terminal:h6
    set guifont=Lucida_Console:h8
elseif has("gui_gtk")
    "set guifont=Monospace\ 8
    "set guifont=Monaco\ 10
    set guifont=Consolas\ 9
endif

" hidden buffers?
"set hidden

set highlight=8r,db,es,hs,mb,Mr,nu,rs,sr,tb,vr,ws

" : and / history
set history=500

" highlight search matches?
set hlsearch

" don't want any icons when in unix
if has("unix")
    set noicon
endif

" ignore case in search patterns?
set noignorecase

" iskeyword=@,48-57,_,192-255   (default)
" Add the dash ('-'), the dot ('.'), and the '@' as "letters" to "words"
" to make it possible to expand email and html addresses.
set iskeyword=@,48-57,_,192-255

" insert two spaces after a period with every joining of lines?
set nojoinspaces

" show status line?
set laststatus=1

" no update screen while exec macro?
set lazyredraw

" see 'hidden' chars such as tabs, eols, trailing spaces?
set nolist
" don't show eols
set listchars=trail:Â»

" literal setting in search patterns
set magic

" delay in ms to show matching parens
set matchtime=3

" allow last line(s) to be modeline?
set modeline
set modelines=2

" allow mouse in all modes
"set mouse=a

" show line numbers?
set nonumber

" what key for toggle 'paste' mode?
if version>=508
    set pastetoggle=[20~
endif

" threshold for lines changed reports
set report=0

" show cursor position?
set ruler

if has("gui_win32") || has("win32")
    let shell='cmd.exe'
    " if using gvim on win98
    "let shell='command.com'
endif

if $SHELL =~ '/usr/local/bin/fish'
   set shell='/bin/sh'
endif


" number of spaces to use for each autoindent
set shiftwidth=2

" prevent prompting for enter after messages as much as possible
set shortmess=atI

" show currently type command?
set showcmd

" show matching parens?
set showmatch

" show current mode?
set showmode

" lower priority filename suffixes for wildcard matching
set suffixes=.bak,~,.o,.swp,.gz,.zip,.bz2,.tar

" keep cursor in the same column when moving vertically?
set nostartofline

" create window below current? :sp
set splitbelow

" create window right of current? :vsp
set splitright

" custom status line
"hi User1 ctermfg=red   ctermbg=white
"hi User2 ctermfg=green ctermbg=white
"hi User3 ctermfg=blue  ctermbg=white
"set statusline=%1*[%02n]%*\ %2*%F%*\ %(\ %M%R%H)%)%=%3*Pos=<%l,%c%V>%*

" tab width
set tabstop=8
set softtabstop=2

" width of text before broken up
set textwidth=76

" modify titlebar?
if has("win32") || has("gui_win32")
    set title
else
   set notitle
endif

" optimize for low line speed
set nottyfast
set nottybuiltin
"set ttyscroll=0

" what and where to store session info
if has("unix")
    set viminfo=%,'100,\"100,/100,:100,@100,n$HOME/.viminfo
elseif has("win32") || has("gui_win32")
    set viminfo=%,'100,\"100,/100,:100,@100,n$vim/_viminfo
endif

" visual bell?
set novisualbell
set t_vb=

" what keys are allowed for wrap movement?
set whichwrap=<,>,h,l,[,]

" what key for expansion on command line?
set wildchar=<TAB>

" make a backup before overwriting (removed afterwards)?
" don't use if editing big files or filesystem almost full
set writebackup

"let treeExplVertical=1
"let treeExplWinSize=30

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPPINGS

" to allow copy+pasting between different vim instances
if has("unix")
    nmap _Y :.w! $HOME/.vi_tmp<CR>
    vmap _Y :w! $HOME/.vi_tmp<CR>
    nmap _P :r $HOME/.vi_tmp<CR>
elseif has("win32") || has("gui_win32")
    nmap _Y :.w! $vim\_vi_tmp<CR>
    vmap _Y :w! $vim\_vi_tmp<CR>
    nmap _P :r $vim\_vi_tmp<CR>
endif

" 'Select All'
"map	<C-A>	ggVG " can't use this, since we're using it for auto increment

" Spellchecking with aspell
map	<C-T>	:w!<CR>:!aspell check "%"<CR>:e! "%"<CR>

" to quickly disable search highlighting
map	[24~	:nohlsearch<CR>
imap	[24~	<ESC>:nohlsearch<CR>i
vmap	[24~	<ESC>:nohlsearch<CR>gv

" shortcut for formatting paragraph
map	<C-J>	gqap
imap	<C-J>	<C-O>gqap
vmap	<C-J>	gq

" Some people prefer to use extrernal formatting utilities
" such as "fmt" or "par":
"nmap	<C-J>	!}fmt<CR>
"vmap	<C-J>	!fmt<CR>

" Put parentheses around "visual text"
vmap	,(	v`<i(<ESC>`>a)<ESC>
vmap	,)	v`<i(<ESC>`>a)<ESC>

"     ,kqs = kill quoted sig (to remove those damn sigs for replies)
"          goto end-of-buffer, search-backwards for a quoted sigdashes
"          line, ie "^> -- $", and delete unto end-of-paragraph:
map	,kqs	G?^> -- $<CR>d}

" don't want keyword lookup
map	K	<NUL>

" apparently my index finger is faster than my ring finger :)
nmap	:W	:w
nmap	:Q	:q
" ...and my right index finger is fat! :)
nmap	:Lw	:w

" save with sudo
cmap w!! %!sudo tee > /dev/null %

" lookup mappings a la unix
map	:alias	    map
map	:which	    map

" parenthize word with " "
map	,,	    maa0<ESC>mbbma$a x<ESC>`awgebi"<ESC>ea"<ESC>$xx`blx`a
" parenthize word with ( )
map	,,,	    maa0<ESC>mbbma$a x<ESC>`awgebi(<ESC>ea)<ESC>$xx`blx`a


map     ,resp       :set noea<CR>:set ea<CR>


"      ,dp = de-quote current inner paragraph
"  map ,dp {jma}kmb:'a,'bs/^> //<CR>
   map ,dp vip:s/^> //<CR>
  vmap ,dp    :s/^> //<CR>

"      ,qp = quote current inner paragraph (works since vim-5.0q)
"            select inner paragraph
"            then do the quoting as a substitution:
   map ,qp   vip:s/^/> /<CR>
"
"      ,qp = quote current paragraph
"            just do the quoting as a substitution:
  vmap ,qp    :s/^/> /<CR>
"
"       ## = comment current inner paragraph with '#':
  nmap  ##   vip:s/^/#<space>/<CR>:set nohlsearch<CR>
"       ## = comment current text selection  with '#':
  vmap  ##      :s/^/#<space>/<CR>:set nohlsearch<CR>

" Miscellaneous
map _# :v/\.\(jpg\\|gif\\|JPG\\|GIF\)$/d<CR>:%s/\([^\\]\)'/\1\\'/g<CR>:%s/^.*http/http/<CR>:%!sort
map _R Orelay: 


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ABBREVIATIONS

iab Yruler  1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
"iab Yhtmldoctype <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><CR><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
iab Yhtmldoctype <?xml version="1.0"?><CR><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><CR><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
iab Ymytag	Ronny Haryanto, Melbourne, <C-R>=strftime("%Y%m%d")<CR>
iab Ydate	<C-R>=strftime("%Y%m%d")<CR>
iab Ydated	<C-R>=strftime("%Y-%m-%d")<CR>
iab Ydatel	<C-R>=strftime("%a %b %d %T %Z %Y")<CR>
iab Ydatetime	<C-R>=strftime("%y%m%d %T")<CR>
iab Ytime	<C-R>=strftime("%H:%M")<CR>
iab Yfilepath	<C-R>=getcwd()."/".bufname(1)<CR>
iab Yfrom       From ronny@iron.localhost  Tue Sep  7 15: 3:02 2010


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AUTOCOMMANDS

au!
" Mac OS X (and maybe FreeBSD) crontab is picky.
au BufRead,BufNewFile /tmp/crontab* set nobackup nowritebackup
au BufRead,BufNewFile *.clp		    set ft=lisp
au BufRead,BufNewFile *.thtml,*.php.default		    set ft=php
au BufRead,BufNewFile .*_mutt,.mutt*	    set ft=muttrc
au BufRead,BufNewFile *.pgsql,*.plpgsql,*.pg.sql	    set ft=pgsql

au FileType c,cpp set cin comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
au FileType perl,sh,php	set ai et cin cinkeys=0{,0},:,!^F,o,O,e comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:- tw=100 sts=4 sw=4
au FileType java,xml,jsp set cin cinkeys=0{,0},:,!^F,o,O,e comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
au FileType xhtml,html set sts=2 sw=2 tw=80
au BufRead,BufNewFile *.clp		    set ft=lisp
au BufRead,BufNewFile *.thtml		    set ft=php
"au BufRead,BufNewFile *.pkg,*.tbl,*.sql,*.PKG,*.SQL,*.TBL    set ft=plsql nowrap tw=0 "ff=dos
au BufRead,BufNewFile .*_mutt,.mutt*	    set ft=muttrc
au FileType python set ai ts=4 sts=4 et sw=4

au FileType ruby,eruby set sts=2 sw=2 tw=80

"augroup filetypedetect
  au! BufRead,BufNewFile *.rhtml		setfiletype eruby
"augroup END

" When editing a file, always jump to the last cursor position.
autocmd BufReadPost * if line("'\"") && line("'\"") <= line("$") | exe "normal `\"" | endif

" ===================================================================
" Customizing the command line
" ===================================================================
" Valid names for keys are:  <Up> <Down> <Left> <Right> <Home> <End>
" <S-Left> <S-Right> <S-Up> <PageUp> <S-Down> <PageDown>  <LeftMouse>
"
" Many shells allow editing in "Emacs Style".
" Although I love Vi, I am quite used to this kind of editing now.
" So here it is - command line editing commands in emacs style:
  cnoremap <C-A>      <Home>
  cnoremap <C-B>      <Left>
" cnoremap <C-B>      <Del>
  cnoremap <C-E>      <End>
  cnoremap <C-F>      <Right>
  cnoremap <C-N>      <End>
  cnoremap <C-P>      <Up>
  cnoremap <ESC>b     <S-Left>
  cnoremap <ESC><C-B> <S-Left>
  cnoremap <ESC>f     <S-Right>
  cnoremap <ESC><C-F> <S-Right>
  cnoremap <ESC><C-H> <C-W>
" Note:  More info about this is in the helptexts:  :help emacs-keys
"
" Additional codes for that "English" keyboard at the Xterminal
  cnoremap <ESC>[D <Left>
  cnoremap <ESC>[C <Right>
"
" ===================================================================


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" LEXICAL HIGLIGHTING

if has("syntax")
"    if has("terminfo")
"	set t_Co=8
"	set t_Sf=[3%p1%dm
"	set t_Sb=[4%p1%dm
"    else
"	set t_Co=8
"	set t_Sf=[3%dm
"	set t_Sb=[4%dm
"    endif
    syntax on
    syn sync fromstart

    if &background == "dark"
      hi Comment    term=bold ctermfg=Green guifg=#80a0ff cterm=NONE
      hi Constant   term=underline ctermfg=Magenta guifg=#ffa0a0 cterm=bold
      hi Special    term=bold ctermfg=LightRed guifg=Orange cterm=NONE
      hi Identifier term=underline ctermfg=Cyan guifg=#40ffff cterm=NONE
      hi Statement  term=bold ctermfg=Yellow guifg=#ffff60 gui=bold cterm=NONE
      hi PreProc    term=underline ctermfg=Cyan guifg=#ff80ff cterm=NONE
      hi Type	    term=underline ctermfg=Cyan guifg=#60ff60 gui=bold cterm=NONE
      hi Ignore	    ctermfg=black guifg=bg
      hi Normal	    guibg=Black guifg=White
    else
      hi Comment    term=bold ctermfg=DarkBlue guifg=Blue cterm=NONE
      hi Constant   term=underline ctermfg=DarkRed guifg=Magenta cterm=NONE
      hi Special    term=bold ctermfg=DarkMagenta guifg=SlateBlue cterm=NONE
      hi Identifier term=underline ctermfg=DarkCyan guifg=DarkCyan cterm=NONE
      hi Statement  term=bold ctermfg=Brown gui=bold guifg=Brown cterm=NONE
      hi PreProc    term=underline ctermfg=DarkMagenta guifg=Purple cterm=NONE
      hi Type	    term=underline ctermfg=DarkGreen guifg=SeaGreen gui=bold cterm=NONE
      hi Ignore	    ctermfg=white guifg=bg
      hi Normal	    guibg=white guifg=black
    endif
    hi Error term=reverse ctermbg=Red ctermfg=White guibg=Red guifg=White
    hi Todo term=standout ctermbg=Yellow ctermfg=Black guifg=Blue guibg=Yellow
endif

let xml_use_xhtml = 1

" vim:tw=76 sw=4 ts=8 sts=4 et comments=\:\"
